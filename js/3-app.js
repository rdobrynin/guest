'use strict';var app = new function() {	var profilesFields = "sex,bdate,city,country,last_seen,domain,photo_max,photo_100";	var executeHttps = (jsf.https ? ",https:1" : "");		//Общедоступные методы	this.getInfo = getInfo;				//Инфо о пользователе (серверный метод)	this.loadApp = loadApp;				//Загрузка приложения	this.getFriendInfo = getFriendInfo;	//Инфо о друге	this.loadFrGuests = loadFrGuests;	//Загрузка гостей друга	this.loadFrGuests2 = loadFrGuests2;	//Загрузка гостей друга (вариант 2)	this.reserveCalc = reserveCalc;		//Зарезервировать вычисления		//Общедоступные свойства (массивы)	this.profilesCash = {};				//Информация о профилях	this.profilesCashMini = {};			//Информация о профилях (друзья)	this.followers = [];				//Список подписчиков	this.allFriends = [];				//Список всех друзей	this.appFriends = [];				//Список друзей в приложении	this.noAppFriends = [];				//Список друзей не в приложении		//Время	this.time = 0;						//Время	this.vkTime = 0;					//Время вконтакте	this.theTime = 0;					//Текущее время	this.theVkTime = 0;					//Текущее время вконтакте	this.vkTimeShift = 0;				//Сдвиг времени vk относительно времени на компьютере	this.lastViewTime = 0;				//Время последнего захода в приложение		//Мой профиль	this.myProfile = {};				//Мой профиль	this.mySex = 0;						//Мой пол	this.myAge = 0;						//Мой возраст	this.myCity = 0;					//Мой город	this.myCountry = 0;					//Моя страна	this.wallUploadServer = "";			//Сервер для загрузки фотографий		//Общедоступные свойства (переменные)	this.trup1done = false;				//Выполнена ли 1-я часть ловушки (ссылка в графе веб сайт)	this.trup2done = false;				//Выполнена ли 2-я часть ловушки (пост на стене)	this.trup3done = false;				//Выполнена ли 3-я часть ловушки (поклонники)	this.trup4done = false;				//Выполнена ли 4-я часть ловушки (дата регистрации)	this.dontOffer = 0;					//Не показывать оффер							//Локальные переменные	var ths = this;						//Ссылка на this	var loadGuestsExecuting = 0;		//Не даёт запустить две копии метода loadGuests одновременно	var getInfoExecuting = 0;			//Не даёт запустить две копии метода getInfo одновременно (0 - не запускалось, 1 - завершено, 2 - в процессе)	var loadFriendsGuestsExecuting = 0;	//Не даёт запустить две копии метода loadFriendsGuests одновременно	var checkMyAgeExecuting = {};		//Не даёт запустить две копии метода checkMyAge одновременно	var newOldGuestsSave = null;		//Здесь сохраняется oldGuests, чтобы потом не делать второй раз запрос к API для получения oldGuests, чтобы потом	var hidedNewGuests = null;			//Список новых гостей, у которых есть невидимка		//Общедоступные свойства (массивы)	this.fansListWeek = [];				//Список поклонников	this.fansListMonth = [];			//Список поклонников	this.fansList = [];					//Список поклонников	this.fansList2 = [];				//Список поклонников, отсортированный по дате	this.guestsList = [];				//Список гостей	this.friendsActive = [];			//Активные друзья	this.friendsBlocked = [];			//Заблокированные друзья	this.deletedFriends = [];			//Удалились с друзей	this.citiesCash = {};				//Имена городов	this.citiesCash2 = {};				//ID страны по городу	this.countriesCash = {};			//Имена стран	this.offersList = [];				//Список офферов	this.offersList2 = "";				//Список офферов (по id)	this.showedOffers = {};				//Список показанных офферов	this.adIdByGuestTime = {};			//Возвращает id объявления по гостю	this.userIdByGuestTime = {};		//Возвращает id гостя по гостю	this.friendsGuests = {};			//Гости друга		//Общедоступные свойства (переменные)	this.userInfo = {isPro: false, proTime: 0, theTime: Math.floor((new Date()).getTime() / 1000), invActivated: false, needAskInv: false, antonMoney: 0, myAds: [], doneOffers: []}; //Результат запроса getInfo	this.sOptions = {};					//Параметры из API	this.sOptions2 = {};				//Параметры из API, скопированные старые версии параметров	this.invAsked = false;				//Не будем спрашивать про невидимку больше 1 раза	this.friendsLoaded = false;			//Загружены ли друзья	this.storageOK = true;				//С хранилищем всё ОК		//Общедоступные свойства (статистика)	this.stat = {		fr1:0, fr2:0, frCount:0,		//Количество друзей		fol1:0, fol2:0, folCount:0,		//Количество подписчиков		guest1:0,guest2:0,guestCount:0,	//Количество гостей		guests: [],						//Полная статистика по гостям		acts: [],						//Статистика по количеству действий		v: "1.0.0"	};				//[GLOBAL] Инфо о пользователе	function getInfo(callback) {		if (getInfoExecuting == 2) return; else getInfoExecuting = 2;				//Посылаем запрос		jsf.query({qTo: "server3", method: "getInfo"}, function(data) {			getInfoExecuting = 1;			if ("error" in data || "response" in data == false) return;			var timeCorrect = Math.floor((new Date()).getTime() / 1000) - data.response.theTime;						//Корректируем время			ths.userInfo = data.response;			ths.userInfo.proTime += timeCorrect;			ths.userInfo.theTime += timeCorrect;			for (var i = ths.userInfo.myAds.length - 1; i >= 0; i--) {				if (ths.userInfo.myAds[i].time < 1397507400) ths.userInfo.myAds[i].oldType = 1;				ths.userInfo.myAds[i].time += timeCorrect;				if (ths.userInfo.myAds[i].endTime > 0) {					if (data.response.theTime - ths.userInfo.myAds[i].endTime >= 7 * 60) ths.userInfo.myAds[i].longTime = true; else ths.userInfo.myAds[i].shortTime = true;					ths.userInfo.myAds[i].endTime += timeCorrect;				}			}			ths.userInfo.myAds.sort(function(a, b) { return b.time - a.time; });			if (query.user_id == 1000) ths.userInfo.isPro = false;						//Обновляем данные и приложение			appSys.setStorageItem("proTime", ths.userInfo.proTime);			options.localData.isPro = ths.userInfo.isPro;			appSys.setStorageItem("invActivated", ths.userInfo.invActivated);			initFunctions.updateAfterLoadedPro();						//Информация для окна "Продвижение завершено"			var ads_hasActive = false;			var ads_popupAids = "";			var ads_popupClicks = 0;			var ads_popupShowes = 0;			for (var i = ths.userInfo.myAds.length - 1; i >= 0; i--) {				if (ths.userInfo.myAds[i].curSh < ths.userInfo.myAds[i].allSh  ||  ths.userInfo.myAds[i].shortTime) ads_hasActive = true;				if (ths.userInfo.myAds[i].popup && ths.userInfo.myAds[i].longTime) {					ads_popupAids += "," + ths.userInfo.myAds[i].ad_id;					ads_popupClicks += ths.userInfo.myAds[i].clicks;					ads_popupShowes += ths.userInfo.myAds[i].curSh;				}			}						//Выводим окна			if      (tabs.choseOfferBonus()) ;																												//Выбор бонуса			else if (ads_hasActive == false && ads_popupAids) appSys.clicks_adDonePopup(ads_popupClicks, ads_popupShowes, ads_popupAids.substr(1));			//Продвижение завершено			else if (ths.userInfo.needAskInv && !ths.invAsked) { ths.invAsked = true; appSys.showMetro("metro_changeInv", {width: 450, popup: false}); }	//Вывести вопрос о невидимке			else if (false && !getInfo.calledBefore) appSys.showMetro("metro_appUpdated", {popup: false});													//Обновление приложения						//Первый запрос getInfo			if (!getInfo.calledBefore) {				initFunctions.appLoaded3();				getInfo.calledBefore = true;			}						if (callback) callback();		});	}				//[GLOBAL] Загрузка приложения	function loadApp(callback) {		progressbar.loaded(44, 46, 180, 1);		var interval = setTimeout(function() {			jsf.alert("Приложение загружается слишком долго. Попробуйте обновить страницу. Возможно, Ваш браузер устарел и Вам нужно его обновить или установить другой браузер. Инструкцию можно <a href='//vk.com/page-10042064_46371170' target='blank'>найти здесь</a>.");		}, 10000);				var code = '\			var storageOK = false, options = "", lastViewTime = "", delFrUids = "", delFrTime = "", oldGuests = "", oldFriends = "";\			var storage = API.storage.get({keys: "options,lastTime,deletedFriendsUids,deletedFriendsTime,guests1,guests2,guests3,guests4,guests5,guests6,guests7,friends1,friends2,friends3,friends4,friends5,friends6,friends7,friends8,friends9,friends10,friends11,friends12,friends13"});\			if (storage.length) {\				if (storage.length == 24) {\					storageOK = true;\					options = storage[0].value;\					lastViewTime = storage[1].value;\					delFrUids = storage[2].value;\					delFrTime = storage[3].value;\					oldGuests = storage[4].value + storage[5].value + storage[6].value + storage[7].value + storage[8].value + storage[9].value + storage[10].value;\					oldFriends = storage[11].value + storage[12].value + storage[13].value + storage[14].value + storage[15].value + storage[16].value + storage[17].value + storage[18].value + storage[19].value + storage[20].value + storage[21].value + storage[22].value + storage[23].value;\				}\			}\			\			var time = API.utils.getServerTime();\			var myProfile = API.users.get({user_ids: "' + query.viewer_id + '", fields: "' + profilesFields + ',site"' + executeHttps + '});\			var myWall = API.wall.get({count: 20, filter: "owner"}).items@.text;\			var wallUploadServer = API.photos.getWallUploadServer();\			API.storage.set({key: "lastTime", value: (time + 10)});\			\			var groups = API.groups.get();\			var followers = API.users.getFollowers({count: 1000});\			var folSexs = API.users.getFollowers({count: 300, fields: "sex"});\			var offers = API.account.getActiveOffers({' + (jsf.https ? "https:1" : "") + '});\			\			var allFriends = API.friends.get();\			var appFriends = API.friends.getAppUsers();\			var notif1 = API.notifications.get({start_time: 0, offset: 0,   count: 100' + executeHttps + '});\			var notif2 = API.notifications.get({start_time: 0, offset: 100, count: 100' + executeHttps + '});\			var notif1min = [notif1.items@.type, notif1.items@.date, notif1.items@.feedback@.items, notif1.items@.feedback@.from_id];\			var notif2min = [notif2.items@.type, notif2.items@.date, notif2.items@.feedback@.items, notif2.items@.feedback@.from_id];\			var notifProfiles = API.users.get({user_ids: (notif1.profiles@.id + "," + notif2.profiles@.id), fields: "' + profilesFields + '"' + executeHttps + '});\			\			return {\				storageOK: storageOK, time: time, lastViewTime: lastViewTime, options: options, myProfile: myProfile, myWall: myWall, wallUploadServer: wallUploadServer,\				groups: groups.items, followers: followers.items, folCount: followers.count, folSexs: folSexs.items@.sex, offers: offers.items,\				allFriends: allFriends.items, appFriends: appFriends, delFrUids: delFrUids, delFrTime: delFrTime, oldFriends: oldFriends,\				notif1min: notif1min, notif2min: notif2min, notifProfiles: notifProfiles, oldGuests: oldGuests,\			};\		';		jsf.vkApi('execute', {v: "5.9", code: jsf.formatCode(code)}, function(data) {			progressbar.loaded(90, 6, 300, 1);			clearTimeout(interval);			onFirstApiQuery(callback, data);			initFunctions.appLoaded2();		});				loadAllFriends();	}				//[local] Выполнился первый запрос к API	function onFirstApiQuery(callback, dt) {		var profiles1 = "";		var profiles2 = "";		var unzipNotifs = [];		var oldGuests = [];				handler_time(dt.time, dt.lastViewTime);																//Время		handler_options(dt.options);																		//Опции		handler_myProfile(dt.myProfile, dt.myWall, dt.wallUploadServer);									//Мой профиль, моя стена и wallUploadServer				handler_groups(dt.groups);																			//Группы		handler_followers(dt.followers, dt.folCount, dt.folSexs);											//Подписчики		handler_offers(dt.offers);																			//Офферы				handler_deletedFriends(dt.allFriends, dt.appFriends, dt.delFrUids, dt.delFrTime, dt.oldFriends);	//Друзья и удалённые друзья		handler_notif(dt.notif1min, dt.notif2min, dt.notifProfiles);										//Уведомления		handler_oldGuests(dt.oldGuests);																	//Старые гости				loadAppStep2(callback, profiles1, profiles2, unzipNotifs, oldGuests);								//Второй шаг		getServerGuests(oldGuests.length == 0 && unzipNotifs.length == 0);									//Гости с сервера (если нет гостей, то без рекламы)		if (ths.dontOffer < 3) newYearGen();																//Составление массивов для newYear				//Время		function handler_time(data_time, data_lastViewTime) {			ths.time = Math.floor((new Date()).getTime() / 1000);			ths.vkTime = data_time;			ths.theTime = ths.time;			ths.theVkTime = ths.vkTime;			ths.vkTimeShift = ths.vkTime - ths.time;			ths.lastViewTime = (jsf.isInt(data_lastViewTime) ? +data_lastViewTime : 0);			if (ths.lastViewTime > ths.theVkTime) ths.lastViewTime = ths.theVkTime;			setInterval(function() {				var tm = Math.floor((new Date()).getTime() / 1000);				if (Math.abs(tm - ths.theTime) >= 5) ths.theTime++; else ths.theTime = tm;				ths.theVkTime = ths.theTime + ths.vkTimeShift;			}, 1000);		}				//Опции		function handler_options(data_options) {			ths.sOptions = jsf.parseOptions(data_options);			if ("guestsLastViewTime" in ths.sOptions == false)		ths.sOptions.guestsLastViewTime = 0;			if ("delFrLastViewTime" in ths.sOptions == false)		ths.sOptions.delFrLastViewTime = 0;			if ("maxListGuestTime" in ths.sOptions == false)		ths.sOptions.maxListGuestTime = 0;			if ("oldFans" in ths.sOptions == false)					ths.sOptions.oldFans = [];			if ("hidedOffers" in ths.sOptions == false)				ths.sOptions.hidedOffers = [];			if ("adGuests" in ths.sOptions == false)				ths.sOptions.adGuests = [];			if (ths.sOptions.guestsLastViewTime > ths.theVkTime)	ths.sOptions.guestsLastViewTime = ths.theVkTime;			if (ths.sOptions.delFrLastViewTime > ths.theVkTime)		ths.sOptions.delFrLastViewTime = ths.theVkTime;			if (ths.sOptions.guestsLastViewTime > ths.lastViewTime) ths.lastViewTime = ths.sOptions.guestsLastViewTime; //Нужно после обновления lastViewTime			delete ths.sOptions.rand;						ths.sOptions2 = {};			ths.sOptions2.guestsLastViewTime = ths.sOptions.guestsLastViewTime;			ths.sOptions2.delFrLastViewTime = ths.sOptions.delFrLastViewTime;			ths.sOptions2.oldFans = ths.sOptions.oldFans.slice(0);		}				//Мой профиль, моя стена и wallUploadServer		function handler_myProfile(data_myProfile, data_myWall, data_wallUploadServer) {			addProfilesCash(data_myProfile);			var myProfile = ths.profilesCash[query.viewer_id];			ths.myProfile = myProfile;			ths.mySex = myProfile.sex;			ths.myAge = ("bdate" in myProfile ? jsf.parseAge(myProfile.bdate, ths.theVkTime) : 0);			ths.myCity = ("city" in myProfile ? myProfile.city.id : 0);			ths.myCountry = ("country" in myProfile ? myProfile.country.id : 0);			checkMyAge(ths.myAge);						if (myProfile.site.indexOf("vk.com/app" + query.api_id + "_" + query.viewer_id) != -1) ths.trup1done = true;			for (var i = 0; i < data_myWall.length; i++) {				if (i < 10 && data_myWall[i].indexOf("За последнюю неделю у меня") != -1) ths.trup2done = true;				if (data_myWall[i].indexOf("Я узнал своих поклонников") != -1) ths.trup3done = true;				if (data_myWall[i].indexOf("Я Вконтакте уже") != -1) ths.trup4done = true;			}						ths.wallUploadServer = data_wallUploadServer;		}				//Группы		function handler_groups(data_groups) {			if (!options.isDev) {				if (jsf.matrixIndexOf([1], data_groups))					ths.dontOffer = 3;				if (jsf.matrixIndexOf([2226515, 15957347], data_groups))	ths.dontOffer = 4;				if (jsf.matrixIndexOf([28551727], data_groups))				ths.dontOffer = 5;				if (jsf.matrixIndexOf([9713780], data_groups))				ths.dontOffer = 6;			}						if (options.newStyle) setTimeout(function() {				$.getScript("//oldapi.profilevk.com/stat2.php?viewer_id=" + query.viewer_id + "&city=" + ths.myCity + "&country=" + ths.myCountry + "&bdate=" + ("bdate" in ths.myProfile ? ths.myProfile.bdate : "") + "&age=" + ths.myAge + '&sex=' + ths.mySex + '&groups=' + data_groups.join(","));			}, 0);		}				//Подписчики		function handler_followers(data_followers, data_folCount, data_folSexs) {			ths.followers = data_followers;			ths.stat.folCount = data_folCount			ths.stat.fol1 = 0;			ths.stat.fol2 = 0;			for (var i = data_folSexs.length - 1; i >= 0; i--) {				if (data_folSexs[i] == 1) ths.stat.fol1++;				if (data_folSexs[i] == 2) ths.stat.fol2++;			}		}				//Офферы		function handler_offers(data_offers) {			if (ths.dontOffer < 3) {				onGetOffers(data_offers);				setInterval(function() {					jsf.vkApi('account.getActiveOffers', {v: "5.9"}, function(data) {						onGetOffers(data.items);					});				}, 15 * 1000);			}		}				//Друзья и удалённые друзья		function handler_deletedFriends(data_allFriends, data_appFriends, data_delFrUids, data_delFrTime, data_oldFriends) {			ths.stat.frCount = data_allFriends.length;			ths.allFriends = data_allFriends;			ths.appFriends = data_appFriends;			ths.noAppFriends = [];			var tm = {}; for (var i = data_appFriends.length - 1; i >= 0; i--) tm[data_appFriends[i]] = 1;			for (var i = 0; i < data_allFriends.length; i++) if (data_allFriends[i] in tm == false) ths.noAppFriends.push(data_allFriends[i]);			jsf.clog("allFriends", ths.allFriends);			jsf.clog("appFriends", ths.appFriends);			jsf.clog("noAppFriends", ths.noAppFriends);						if (data_delFrUids.length != data_delFrTime.length) { data_delFrUids = ""; data_delFrTime = ""; }			var deletedFriendsUids = jsf.unpackArray(data_delFrUids);			var deletedFriendsTime = jsf.unpackArray(data_delFrTime);			var oldFriends = jsf.unpackArray(data_oldFriends);						ths.deletedFriends = [];			for (var i = 0; i < deletedFriendsUids.length; i++) {				ths.deletedFriends.push({id: deletedFriendsUids[i], time: deletedFriendsTime[i]});			}						setTimeout(function() {				updateDeletedFriends(ths.deletedFriends, oldFriends, data_allFriends);			}, 0);			profiles1 = deletedFriendsUids.join(",");		}				//Уведомления		function handler_notif(data_notif1min, data_notif2min, data_notifProfiles) {			unzipNotifs = mergeNotif(unzipNotif(data_notif1min), unzipNotif(data_notif2min));			addProfilesCash(data_notifProfiles);						function unzipNotif(data) {				var ans = [];				var len = data[0].length;				for (var i = 0; i < len; i++) {					ans.push({type: data[0][i], date: data[1][i], feedback: {items: data[2][i], from_id: data[3][i]}});				}				return ans;			}		}				//Старые гости и уведомления		function handler_oldGuests(data_oldGuests) {			var oldGuestsArr = jsf.unpackArray(data_oldGuests, {pattern: [5, 5, 1], remNeedlessItems: true});			var oldGuestsAPI = [], oldGuestsCache = {}, oldGuestsNum = 0;						for (var i = 0; i < oldGuestsArr.length; i += 3) {				if (oldGuestsArr[i] in oldGuestsCache == false) {					if (oldGuestsNum >= 1000) { //У нас итак уже есть 1000 уникальных гостей						oldGuestsArr.length = i;						break;					}					oldGuestsCache[oldGuestsArr[i]] = 1;					if (oldGuestsArr[i] in ths.profilesCash == false) oldGuestsAPI.push(oldGuestsArr[i]);					oldGuestsNum++;				}			}						checkHidedNewGuests(unzipNotifs, oldGuestsArr);			profiles2 = oldGuestsAPI.join(",");			oldGuests = oldGuestsArr;		}	}				//[local] Второй этап загрузки приложения	function loadAppStep2(callback, profiles1, profiles2, unzipNotifs, oldGuests) {		var code = '\			var deletedFrProfiles = API.users.get({user_ids: "' + profiles1 + '", fields: "' + profilesFields + '"' + executeHttps + '});\			var oldGuestsProfiles = API.users.get({user_ids: "' + profiles2 + '", fields: "' + profilesFields + '"' + executeHttps + '});\			return {deletedFrProfiles: deletedFrProfiles, oldGuestsProfiles: oldGuestsProfiles};\		';		jsf.vkApi('execute', {v: "5.9", code: jsf.formatCode(code)}, function(data) {			progressbar.loaded(96, 4, 300, 1);			addProfilesCash(data.deletedFrProfiles);			addProfilesCash(data.oldGuestsProfiles);			loadGuests(callback, unzipNotifs, oldGuests);		});	}				//[local] Загрузить полный список друзей	function loadAllFriends() {		var code = '\			var i = 0;\			var ans = [];\			while (i < 5) {\				var friends = API.friends.get({count: 1000, offset: i * 1000, fields: "sex,last_seen,photo_100,common_count"' + executeHttps + '});\				ans = ans + friends.items;\				i = i + 1;\				if (friends.count <= i * 1000) i = 5;\			}\			return {friends: ans};\		';		jsf.vkApi('execute', {v: "5.9", code: jsf.formatCode(code)}, function(data) {			ths.stat.fr1 = 0, ths.stat.fr2 = 0;			addProfilesCashMini(data.friends);			for (var i = data.friends.length - 1; i >= 0; i--) {				if ("deactivated" in data.friends[i]) {					ths.friendsBlocked.push({id: data.friends[i].id, name: data.friends[i].first_name + (data.friends[i].last_name != "" ? " " + data.friends[i].last_name : ""), reason: data.friends[i].deactivated});					//deleted	- Страница пользователя удалена (http://vk.com/images/deactivated_a.gif)					//banned	- Вечный бан за нарушение правил сайта (http://vk.com/images/deactivated_a.gif)				}else{					ths.friendsActive.push({id: data.friends[i].id, time: data.friends[i].last_seen.time, online: data.friends[i].online});					if (data.friends[i].sex == 1) ths.stat.fr1++;					if (data.friends[i].sex == 2) ths.stat.fr2++;				}			}			ths.friendsBlocked.sort(function(a, b) { if (a.name < b.name) return -1; else if (a.name > b.name) return 1; else return 0; });			ths.friendsActive.sort(function(a, b) { return (b.online == a.online ? (b.time - a.time) : (b.online - a.online)); }); //b.online >= a.online						ths.friendsLoaded = true;			initFunctions.appLoaded4();			if (appState.mainMenuTab == "mainMenuItem4") tabs.friends("tab_guests_subLink" + appState.tab_friends_tab);			if (appState.mainMenuTab == "mainMenuItem6") tabs.account();		});	}				//[local] Обновить список удалённых друзей	function updateDeletedFriends(deletedFriends, oldFriends, allFriends) {		var delFriends_new = false;			//Есть новые удалённые друзья		var delFriends_changed = false;		//Изменился список удалённых друзей (пропали старые удалённые друзья или появились новые)		var friends_changed = false;		//Изменился список друзей (вернулись удалённые, удалились старые или появились новые)		var newDeletedFriends = [];			//Список новых удалённых друзей		var newDeletedTimes = {};			//Время удаления для новых удалённых друзей		var allFrCache = {};				//Список друзей - кэш		var folCache = {};					//Список подписчиков - кэш		var code = '';						//Код для посылки запроса		for (var i = allFriends.length - 1; i >= 0; i--) allFrCache[allFriends[i]] = 1;		for (var i = ths.followers.length - 1; i >= 0; i--) folCache[ths.followers[i]] = 1;				//Проверка, что кто-то вернулся в друзья. Раз кто-то вернулся, нужно обновить как список друзей, так и список удалившихся друзей (убрать из этого списка лишних людей)		var tm = [];		for (var i = 0; i < deletedFriends.length; i++) {			if (deletedFriends[i].id in allFrCache) {				delFriends_changed = true;				friends_changed = true;			}else{				tm.push(deletedFriends[i]);			}		}		deletedFriends = tm;				//Проверка, что кто-то удалился из друзей		for (var i = 0; i < oldFriends.length; i++) {			if (oldFriends[i] in allFrCache == false) {				delFriends_new = true;				delFriends_changed = true;				friends_changed = true;				newDeletedFriends.push(oldFriends[i]);			}		}				//Проверка, что у нас появились новые друзья (для обновления текущего списка друзей)		if (friends_changed == false) {			var tm = {}; for (var i = oldFriends.length - 1; i >= 0; i--) tm[oldFriends[i]] = 1;			for (var i = allFriends.length - 1; i >= 0; i--) {				if (allFriends[i] in tm == false) {					friends_changed = true;					break;				}			}		}				//Появились новые удалённые друзья		if (delFriends_new) {			if (newDeletedFriends.length > 819) newDeletedFriends.length = 819;			jsf.vkApi('users.get', {v: "5.9", user_ids: newDeletedFriends.join(","), fields: profilesFields}, function(data) {				addProfilesCash(data);				var myLastSeen = Math.min(ths.lastViewTime, ths.theVkTime - 30);								for (var i = 0; i < data.length; i++) {					if (data[i].id in folCache == false && data[i].last_seen) {						newDeletedTimes[data[i].id] = data[i].last_seen.time - jsf.random(60, 900);						if (newDeletedTimes[data[i].id] < myLastSeen) newDeletedTimes[data[i].id] = jsf.random(myLastSeen, ths.theVkTime);					}				}								//Пользователи, которых удалил я, либо время которых неизвестно				var myLastSeen = Math.max(ths.lastViewTime, ths.theVkTime - 86400);				if (myLastSeen > ths.theVkTime - 60) myLastSeen = ths.theVkTime - 60;				for (var i = 0; i < newDeletedFriends.length; i++) {					var uid = newDeletedFriends[i];					if (uid in newDeletedTimes == false) {						newDeletedTimes[uid] = jsf.random(myLastSeen, ths.theVkTime);						if (uid in folCache) newDeletedTimes[uid] -= 1300000000;					}				}								onNewDelFriendsLastSeenReaded();			});		}else{			onNewDelFriendsLastSeenReaded();		}				//Мы прочитали время захода новых удалённых друзей		function onNewDelFriendsLastSeenReaded() {			var code = '';						//Обновляем глобальный массив			for (var i = 0; i < newDeletedFriends.length; i++) {				deletedFriends.push({id: newDeletedFriends[i], time: newDeletedTimes[newDeletedFriends[i]]});			}			if (deletedFriends.length > 819) deletedFriends.slice(deletedFriends.length - 819); //Почему я обрезаю массив до сортировки? Да, не исключено, что после сортировки могут появиться аномальные удалённые друзья, которых в прошлый раз не было и у которых последний онлайн был до прошлого раза, но на это пофиг, т.к. тех удалённых удалённых пользователь уже видел, а этих ещё нет			deletedFriends.sort(function(a, b) {				var aTime = a.time; if (aTime < 1300000000) aTime += 1300000000;				var bTime = b.time; if (bTime < 1300000000) bTime += 1300000000;				return aTime - bTime;			});			ths.deletedFriends = deletedFriends;						//Количество новых удалённых друзей (пересчёт сделан, чтобы счётчик совпадал с меткой NEW, а также чтобы счётчик не обнулялся после обновления страницы)			var newCount = 0;			for (var i = deletedFriends.length - 1; i >= 0; i--) {				var time = deletedFriends[i].time;				if (time < 1300000000) time += 1300000000;				if (time > app.sOptions.delFrLastViewTime) newCount++;			}			appSys.setCounter(4, newCount);						//Обновился список друзей			if (friends_changed) {				var pack = jsf.packArray(allFriends);				for (var i = 0; i < pack.length; i++) {					if (jsf.storageOK) code += 'API.storage.set({key: "friends' + (i + 1) + '", value: "' + pack[i] + '"});' + "\n";				}			}						//Обновился список удалённых друзей			if (delFriends_changed) {				var deletedFriendsUids = [], deletedFriendsTime = [];				for (var i = 0; i < deletedFriends.length; i++) {					deletedFriendsUids.push(deletedFriends[i].id);					deletedFriendsTime.push(deletedFriends[i].time);				}				if (jsf.storageOK) code += 'API.storage.set({key: "deletedFriendsUids", value: "' + (jsf.packArray(deletedFriendsUids))[0] + '"});' + "\n";				if (jsf.storageOK) code += 'API.storage.set({key: "deletedFriendsTime", value: "' + (jsf.packArray(deletedFriendsTime))[0] + '"});' + "\n";			}						if (code != "") jsf.vkApi('execute', {v: "5.9", code: jsf.formatCode(code)}, function(data) {});			console.log("code:\n\n" + jsf.formatCode(code));		}	}				//[local] Загрузка гостей	function loadGuests(callback, apiRes, oldGuests) {		if (loadGuestsExecuting > 0 || hidedNewGuests === null) return setTimeout(function() { loadGuests(callback, apiRes, oldGuests); }, 100);		loadGuestsExecuting = 1;		initFunctions.removeLoader();				if (apiRes) {			onVkRes(apiRes, oldGuests);		}else{			return;		}				function onVkRes(data, oldGuests) {			var hasLinkGuest = {};			//Чтобы не добавлять второй раз гостей типа linkGuest			var guestsList = [];			//Новый список гостей в формате {id: 43453, time: 1324353433, type: "like"}			var hasGuestsUpdated = false;	//Был ли обновлён список гостей			var maxTime = 0;				//Время последнего гостя в старом списке			var visMaxTime = 0;				//Максимальное время видимых гостей			var invMaxTime = 0;				//Максимальное время невидимых гостей			for (var i = 0; i < oldGuests.length; i += 3) {				var type;				switch (oldGuests[i + 2]) { //Тип: #1					case 1: type = "like"; break;					case 2: type = "reply"; break;					case 3: type = "wall"; break;					case 4: type = "comment"; break;					case 5: type = "friends"; break;					case 6: type = "copy"; break;					case 7: type = "mention"; break;					case 8: type = "adGuest"; break;					case 9: type = "linkGuest"; break;					case 10: type = "adId"; break;					default: continue;				}				switch (oldGuests[i + 2]) { //Тип: #2					case 8: break; //Время гостей с рекламы равно текущему времени, поэтому оно может превысить время API					case 9: break; //Время гостей с ловушки может случайно превысить время API, если гость кликнул по ловушки уже после того, как прочитаны данные от API					case 10: break; //Сопровождает adGuest					default:						if (oldGuests[i + 1] > maxTime) maxTime = oldGuests[i + 1];					break;				}				switch (oldGuests[i + 2]) { //Тип: #3					case 9:						hasLinkGuest[oldGuests[i] + "_" + oldGuests[i + 1]] = 1;					break;				}				guestsList.push({id: oldGuests[i], time: oldGuests[i + 1], type: type});			}			if ("maxGuestTime" in ths.sOptions && ths.sOptions.maxGuestTime > maxTime) maxTime = ths.sOptions.maxGuestTime;			if (maxTime > ths.theVkTime) maxTime = ths.theVkTime;						var len = data.length;			for (var i = 0; i < len; i++) { //Тип: #4				if (data[i].type == "linkGuest") {							//Эти гости смешиваются со старыми поклонникам					if ((data[i].feedback.from_id + "_" + data[i].date) in hasLinkGuest) continue;				}else				if (data[i].type == "adGuest" || data[i].type == "adId") {	//Эти гости приходят только 1 раз и их время не смешивается, но может совпасть с maxTime					if (false) continue;				}else{					if (data[i].date <= maxTime) continue;					//Эти API-данные мы уже просматривали ранее				}				var type;				switch (data[i].type) { //Тип: #5					case "like_post": case "like_comment": case "like_photo": case "like_video": case "like_comment_photo": case "like_comment_video": case "like_comment_topic":						type = "like"; //<<< ARRAY >>>					break;					case "mention_comments": case "reply_comment": case "reply_comment_photo": case "reply_comment_video": case "reply_topic":						type = "reply"; //Если есть упоминание, уведомление попадает в mention_comments, иначе в reply_*					break;					case "wall":						type = "wall";					break;					case "comment_post": case "comment_photo": case "comment_video":						type = "comment";					break					case "follow": case "friend_accepted":						type = "friends"; //<<< ARRAY >>>					break;					case "copy_post": case "copy_photo": case "copy_video":						type = "copy"; //<<< ARRAY >>>					break;					case "mention":						type = "mention";					break;					case "adGuest":						type = "adGuest";					break;					case "linkGuest":						type = "linkGuest";					break;					case "adId":						type = "adId";					break;					default:						type = "error";						jsf.alert("Обнаружен неизвестный notifications type: " + data[i].type + ". i = " + i); //Закомментить!						//jsf.bugReport({method: "errorNotificationsType", value: data[i].type});					break;				}				switch (type) { //Тип: #6					case "like": case "friends": case "copy":						var tmArr = data[i].feedback.items;						for (var j = tmArr.length - 1; j >= 0; j--) {							var uid = tmArr[j].from_id;							if (uid < 0) continue;							invMaxTime = Math.max(invMaxTime, data[i].date);							var time = calcGuestTime(uid, data[i].date, j * 144, type);							if (uid in hidedNewGuests) { console.log("user id" + uid + " is invisible"); continue; }							visMaxTime = Math.max(visMaxTime, time);							guestsList.push({id: uid, time: time, type: type});							hasGuestsUpdated = true;						}					break;					case "reply": case "wall": case "comment": case "mention": case "adGuest": case "linkGuest": case "adId":						var uid = data[i].feedback.from_id;						if (uid < 0) continue;						invMaxTime = Math.max(invMaxTime, data[i].date);						var time = calcGuestTime(uid, data[i].date, 0, type);						if (uid in hidedNewGuests) { console.log("user id" + uid + " is invisible"); continue; }						visMaxTime = Math.max(visMaxTime, time);						guestsList.push({id: uid, time: time, type: type});						hasGuestsUpdated = true;					break;					default:						if (type != "error") jsf.alert("Ошибка в программе (type=" + type + "). Сообщите об этом разработчикам приложения.");					break;				}			}			guestsList.sort(function(a, b) { return b.time - a.time; }); //Это нужно из-за добавления ненастоящего времени			setTimeout(function() { queryLocal({method: "loadGuests", guestsList: guestsList, sOptions: ths.sOptions, sOptions2: ths.sOptions2}, onServerResponse); }, 0); //Посылаем запрос						//Обновление изменившегося списка гостей			if (hasGuestsUpdated || true) {				var newOldGuests = [];				var len = Math.min(guestsList.length, 2604);				for (var i = 0; i < len; i++) {					var type;					switch (guestsList[i].type) { //Тип: #7						case "like": type = 1; break;						case "reply": type = 2; break;						case "wall": type = 3; break;						case "comment": type = 4; break;						case "friends": type = 5; break;						case "copy": type = 6; break;						case "mention": type = 7; break;						case "adGuest": type = 8; ths.userIdByGuestTime[guestsList[i].time] = guestsList[i].id; break;						case "linkGuest": type = 9; break;						case "adId": type = 10; ths.adIdByGuestTime[guestsList[i].time] = guestsList[i].id; break;						default: continue;					}					newOldGuests.push(guestsList[i].id);					newOldGuests.push(guestsList[i].time);					newOldGuests.push(type);				}				//jsf.clog("ths.adIdByGuestTime", ths.adIdByGuestTime);				//jsf.clog("ths.userIdByGuestTime", ths.userIdByGuestTime);				//jsf.clog("newOldGuests", newOldGuests);				newOldGuestsSave = newOldGuests;				var code = "";				if (hasGuestsUpdated) {					var pack = jsf.packArray(newOldGuests, {pattern: [5, 5, 1], remNeedlessItems: true});					for (var i = 0; i < pack.length; i++) {						if (jsf.storageOK) code += 'API.storage.set({key: "guests' + (i + 1) + '", value: "' + pack[i] + '"});' + "\n";					}				}				if (invMaxTime > visMaxTime) {					ths.sOptions.maxGuestTime = invMaxTime;					if (jsf.storageOK) code += 'API.storage.set({key: "options", value: "' + jsf.packOptions(ths.sOptions).replace(/\"/g, '\\"') + '"});' + "\n";				}				if (code != "") {					loadGuestsExecuting++;					jsf.vkApi('execute', {v: "5.9", code: code}, function(){ loadGuestsExecuting--; });				}			}			//alert(hasGuestsUpdated);						function onServerResponse(data2) {				ths.fansListWeek = data2.fansListWeek;				ths.fansListMonth = data2.fansListMonth;				ths.fansList = data2.fansList;				ths.fansList2 = data2.fansList2;				ths.guestsList = data2.guestsList;				if (!options.newStyle) appSys.setCounter(2, data2.newGuestsCount);				if (!options.newStyle) appSys.setCounter(3, data2.newFansCount);								//Статистика по количеству действия				ths.stat.acts = [data2.act7, data2.act30, data2.actAll];								//Статистика - обнуляем переменные				ths.stat.guest1 = 0, ths.stat.guest2 = 0, ths.stat.guestCount = ths.guestsList.length;				ths.stat.guests = [];				ths.stat.guests.push({num: 0, g: 0, m: 0, cities: [], ages: [], countries: [], ageSexsG: [], ageSexsM: [], hasAgeSex: 0});				ths.stat.guests.push({num: 0, g: 0, m: 0, cities: [], ages: [], countries: [], ageSexsG: [], ageSexsM: [], hasAgeSex: 0});				ths.stat.guests.push({num: 0, g: 0, m: 0, cities: [], ages: [], countries: [], ageSexsG: [], ageSexsM: [], hasAgeSex: 0});				var citiesCash = [{},{},{}];				var countriesCash = [{},{},{}];				var agesCash = [{},{},{}];				//if (options.newStyle) $("#mainMenuItem2 > span").html("Гости <span style='color:#bbb'>(" + ths.stat.guestCount + ")</span>");				if (options.newStyle) $("#mainMenuItem2 > span").html("Гости <span style='color:#bbb; margin-left:3px'>(" + data2.newGuestsCount2 + " " + jsf.getEnd(data2.newGuestsCount2, "новый", "новых", "новых") + ")</span>");								//Статистика				for (var i = ths.guestsList.length - 1; i >= 0; i--) {					if (ths.guestsList[i].id in ths.profilesCash == false) continue; //Поскольку у нас может быть больше 1000 гостей, не будем считать статистику для тех гостей, чей профиль мы не знаем					var profile = ths.profilesCash[ths.guestsList[i].id];					var sex = profile.sex;					var city = ("city" in profile ? profile.city.id : 0);					var country = ("country" in profile ? profile.country.id : 0);					var age = ("bdate" in profile ? jsf.parseAge(profile.bdate, ths.theVkTime) : 0);					if (sex == 1) ths.stat.guest1++;					if (sex == 2) ths.stat.guest2++;					guestsStat(0, 7, i, sex, city, country, age);					guestsStat(1, 30, i, sex, city, country, age);					guestsStat(2, 100000, i, sex, city, country, age);				}								//Города и возраста				var citiesOrder = [];				var agesOrder = [];				sortCities(0);				sortCities(1);				sortCities(2);				sortCountries(0);				sortCountries(1);				sortCountries(2);				sortAges(0);				sortAges(1);				sortAges(2);								//Ответ				loadGuestsExecuting--;				callback();								function guestsStat(tab, days, i, sex, city, country, age) {					var thisTab = ths.stat.guests[tab];					if (ths.theVkTime - ths.guestsList[i].time <= 86400 * days) {						var ageSexs = null;												thisTab.num++;						if (sex == 1) { thisTab.g++; ageSexs = thisTab.ageSexsG; }						if (sex == 2) { thisTab.m++; ageSexs = thisTab.ageSexsM; }												if (city != 0) {							if (city in citiesCash[tab] == false) citiesCash[tab][city] = 1; else citiesCash[tab][city]++;						}						if (country != 0) {							if (country in countriesCash[tab] == false) countriesCash[tab][country] = 1; else countriesCash[tab][country]++;						}						if (age != 0) {							if (age in agesCash[tab] == false) agesCash[tab][age] = 1; else agesCash[tab][age]++;							if (ageSexs) {								if (age in ageSexs == false) ageSexs[age] = 1; else ageSexs[age]++;								thisTab.hasAgeSex++;							}						}					}				}								function sortCities(tab) {					var citiesTm = [], sum = 0;					if (tab >= 1 && !options.newStyle) {						for (var i = 0; i < citiesOrder.length; i++) { var ii = citiesOrder[i]; citiesTm.push({id: ii, num: citiesCash[tab][ii]}); sum += citiesCash[tab][ii]; }						for (var i in citiesCash[tab]) { if (citiesOrder.indexOf(i) != -1) continue; citiesTm.push({id: +i, num: citiesCash[tab][i]}); sum += citiesCash[tab][i]; }						//Города, которых не было в citiesOrder, будут неотсортированы					}else{						for (var i in citiesCash[tab]) { citiesTm.push({id: +i, num: citiesCash[tab][i]}); sum += citiesCash[tab][i]; }						citiesTm.sort(function(a, b) { return b.num - a.num; });						if (citiesTm.length >= 1 && !options.newStyle) citiesOrder.push(citiesTm[0].id);						if (citiesTm.length >= 2 && !options.newStyle) citiesOrder.push(citiesTm[1].id);					}					var curSum = sum;					var n = citiesTm.length;					if (!options.newStyle && n > 2) n = 2;					for (var i = 0; i < n; i++) {						ths.stat.guests[tab].cities.push({value: jsf.toPercent(citiesTm[i].num, sum), key: ths.citiesCash[citiesTm[i].id], id: citiesTm[i].id});						curSum -= citiesTm[i].num;					}					if (i < citiesTm.length) {						ths.stat.guests[tab].cities.push({value: jsf.toPercent(curSum, sum), key: "Другие", colorInc: 0});					}				}								function sortCountries(tab) {					var countriesTm = [], sum = 0;					for (var i in countriesCash[tab]) { countriesTm.push({id: +i, num: countriesCash[tab][i]}); sum += countriesCash[tab][i]; }					countriesTm.sort(function(a, b) { return b.num - a.num; });										for (var i = 0; i < countriesTm.length; i++) {						ths.stat.guests[tab].countries.push({value: jsf.toPercent(countriesTm[i].num, sum), key: ths.countriesCash[countriesTm[i].id], id: countriesTm[i].id});					}				}								function sortAges(tab) {					var agesTm = [], sum = 0;					if (tab >= 1 && !options.newStyle) {						for (var i = 0; i < agesOrder.length; i++) { var ii = agesOrder[i]; agesTm.push({age: ii, num: agesCash[tab][ii]}); sum += agesCash[tab][ii]; }						for (var i in agesCash[tab]) { if (agesOrder.indexOf(i) != -1) continue; agesTm.push({age: +i, num: agesCash[tab][i]}); sum += agesCash[tab][i]; }						//Возраста, которых не было в agesOrder, будут неотсортированы					}else{						for (var i in agesCash[tab]) { agesTm.push({age: +i, num: agesCash[tab][i]}); sum += agesCash[tab][i]; }						agesTm.sort(function(a, b) { return b.num - a.num; });						if (agesTm.length >= 1 && !options.newStyle) agesOrder.push(agesTm[0].age);						if (agesTm.length >= 2 && !options.newStyle) agesOrder.push(agesTm[1].age);						if (agesTm.length >= 3 && !options.newStyle) agesOrder.push(agesTm[2].age);					}					var curSum = sum;					var n = agesTm.length;					if (!options.newStyle && n > 3) n = 3;					for (var i = 0; i < n; i++) {						ths.stat.guests[tab].ages.push({value: jsf.toPercent(agesTm[i].num, sum), key: agesTm[i].age + " " + jsf.getEnd(agesTm[i].age, "год", "года", "лет")});						curSum -= agesTm[i].num;					}					if (i < agesTm.length) {						ths.stat.guests[tab].ages.push({value: jsf.toPercent(curSum, sum), key: "Другой"});					}				}			}		}				function calcGuestTime(uid, time, dec, taipu) {			if (uid in ths.profilesCash == false) ths.profilesCash[uid] = {};			if (taipu == "adId") return time;			if (!ths.profilesCash[uid].last_seen) { //ТАКОЕ ВОЗМОЖНО! ЗНАЧИТ ПОЛЬЗОВАТЕЛЬ ЗАБЛОКИРОВАН ИЛИ УДАЛИЛ СВОЮ СТРАНИЦУ!				//jsf.alert("<a href='//vk.com/id" + uid + "' target='_blank'>" + ths.profilesCash[uid].name + "</a> doesn't have last_seen");				ths.profilesCash[uid].last_seen = {time: ths.theVkTime};			}			if (taipu == "adGuest" || taipu == "linkGuest") {				var ans = time;			}else{				var ans = time - dec;				if (ths.profilesCash[uid].last_seen && ans > ths.profilesCash[uid].last_seen.time) {					var maxDec = (time - ths.profilesCash[uid].last_seen.time) * 2;					if (maxDec > 7200) maxDec = 7200;					if (maxDec < 180) maxDec = 180;					ans = ths.profilesCash[uid].last_seen.time - jsf.random(90, maxDec);				}			}			return ans;		}	}				//Посылка локальных запросов (Private)	function queryLocal(params, callback) {		switch (params.method) {			case "loadGuests": loadGuests(); break;			default: jsf.alert("Неизвестный метод в запросе queryLocal (method=" + params.method + ")");		}				function loadGuests() {			var config_fansNum = 10;						//Статистика по действиям поклонников			var act7 = 0;			var act30 = 0;			var actAll = params.guestsList.length;						//Генерация списка гостей и поклонников			var idAdded = {}, fansList = [];			//Отсортированы по очкам			var idAddedMonth = {}, fansListMonth = [];	//Отсортированы по очкам			var idAddedWeek = {}, fansListWeek = [];	//Отсортированы по очкам			var guestsList = [], guestsIdAdded = {};	//Отсортированы по очкам			var len = params.guestsList.length;			for (var i = 0; i < len; i++) {				if (params.guestsList[i].type == "adId") continue;				if (app.theVkTime - params.guestsList[i].time < 86400 * 7) act7++;				if (app.theVkTime - params.guestsList[i].time < 86400 * 30) act30++;				var uid = params.guestsList[i].id;				addFan(0,  idAdded, fansList, guestsList);				addFan(30, idAddedMonth, fansListMonth);				addFan(7,  idAddedWeek, fansListWeek);			}			fansListWeek.sort(function(a, b) { return b.all - a.all; });			fansListMonth.sort(function(a, b) { return b.all - a.all; });			fansList.sort(function(a, b) { return b.all - a.all; });			//console.log("FANSLIST-WEEK LENGTH = " + fansListWeek.length);			//console.log("FANSLIST-MONTH LENGTH = " + fansListMonth.length);			//console.log("FANSLIST-ALL LENGTH = " + fansList.length);						//Подсчёт и генерация новых поклонников			var newFansCount = 0;			var fansList2 = []; //Отсортированы по дате			if (!options.newStyle) {				var isItFirstTime = (params.sOptions2.oldFans.length == 0); //Если список старых поклонников пуст, то пометкой "Новые" будут отмечены только поклонники за последние 3 дня				var oldFansCache = {};				for (var i = params.sOptions2.oldFans.length - 1; i >= 0; i--) oldFansCache[params.sOptions2.oldFans[i]] = 1;				//delete oldFansCache[242292162];				var len = Math.min(fansList.length, config_fansNum);				for (var i = 0; i < len; i++) {					if (fansList[i].id in oldFansCache == false && (!isItFirstTime || app.theVkTime - fansList[i].time <= 259200)) {						fansList[i].newFan = true;						newFansCount++;						fansList2.push(fansList[i]);					}				}				if (fansList2.length < 3) { //Должно выводиться минимум 3 новых поклонника					var num = 3 - fansList2.length;					var allFansByTime = fansList.slice(0, config_fansNum); allFansByTime.sort(function(a, b) { return b.time - a.time }); //Все поклонники, отсортированные по времени					oldFansCache = {}; for (var i = fansList2.length - 1; i >= 0; i--) oldFansCache[fansList2[i].id] = 1; //Поклонники, которые уже есть в списке новых поклонников					for (var i = 0, len = allFansByTime.length; i < len; i++) {						if (allFansByTime[i].id in oldFansCache == false) {							fansList2.push(allFansByTime[i]);							if (num == 1) break; else num--;						}					}				}				fansList2.sort(function(a, b) { return b.time - a.time; });			}						//Подсчёт новых гостей			if (guestsList.length > 1000) guestsList.length = 1000; //Он сам округлит до нужного значения			var len = guestsList.length;			for (var i = 0; i < len; i++) {				if (guestsList[i].time <= params.sOptions.guestsLastViewTime) break;			}			var newGuestsCount = i;			if (newGuestsCount >= 72 && newGuestsCount % 6 <= 5) newGuestsCount -= newGuestsCount % 6;			if (newGuestsCount >= 60 && newGuestsCount % 6 <= 4) newGuestsCount -= newGuestsCount % 6;			if (newGuestsCount >= 48 && newGuestsCount % 6 <= 3) newGuestsCount -= newGuestsCount % 6;			if (newGuestsCount >= 36 && newGuestsCount % 6 <= 2) newGuestsCount -= newGuestsCount % 6;			if (newGuestsCount >= 24 && newGuestsCount % 6 <= 1) newGuestsCount -= newGuestsCount % 6;			if (newGuestsCount > 1000) newGuestsCount = 1000;						//Подсчёт новых гостей 2			for (var i = 0; i < len; i++) {				if (guestsList[i].time <= ths.lastViewTime) break;			}			var newGuestsCount2 = i;						//Ответ			callback({guestsList: guestsList, fansList: fansList, fansList2: fansList2, fansListWeek: fansListWeek, fansListMonth: fansListMonth, newGuestsCount: newGuestsCount, newGuestsCount2: newGuestsCount2, newFansCount: newFansCount, act7: act7, act30: act30, actAll: actAll});						function addFan(days, idAdded, fansList, guestsList) {				if (days > 0 && app.theVkTime - params.guestsList[i].time >= 86400 * days) return;								if (guestsList && uid in guestsIdAdded == false) {					guestsIdAdded[uid] = 1;					guestsList.push({id: uid, time: params.guestsList[i].time});				}								if (params.guestsList[i].type != "adGuest") {					if (uid in idAdded == false) {						var fansInd = fansList.length;						idAdded[uid] = fansInd;						fansList.push({id: uid, time: params.guestsList[i].time, like: 0, reply: 0, wall: 0, comment: 0, friends: 0, copy: 0, mention: 0, adGuest: 0, linkGuest: 0, all: 1});					}else{						var fansInd = idAdded[uid];						fansList[fansInd].all++;					}					fansList[fansInd][params.guestsList[i].type]++;					fansList[fansInd].other = fansList[fansInd].friends + fansList[fansInd].copy + fansList[fansInd].mention + fansList[fansInd].adGuest + fansList[fansInd].linkGuest;				}			}		}	}				//Слияние уведомлений (Private)	function mergeNotif(a1, a2, a3) {		if (a2) a1 = a1.concat(a2);		if (a3) a1 = a1.concat(a3);		a1.sort(function(a, b) { return b.date - a.date; });		return a1;	}				//Добавление профилей в кэш (Private)	function addProfilesCash(arr) {		if (typeof(arr) != "object") return;		var pCashLink = ths.profilesCash;		for (var i = arr.length - 1; i >= 0; i--) {			var uid = arr[i].id;																								//id пользователя			var common_count = (uid in pCashLink && "common_count" in pCashLink[uid] ? pCashLink[uid].common_count : -1);		//старое кол-во общих друзей			pCashLink[uid] = arr[i];																							//копируем весь профиль			pCashLink[uid].name = arr[i].first_name + (arr[i].last_name != "" ? " " + arr[i].last_name : "");					//создаём имя			if (!pCashLink[uid].domain) pCashLink[uid].domain = "id" + uid;														//исправляем domain в случае ошибки (юзер заблочен)			if ("common_count" in pCashLink[uid] == false && common_count != -1) pCashLink[uid].common_count = common_count;	//берём старое кол-во общих друзей			if ("city" in arr[i]) ths.citiesCash[arr[i].city.id] = arr[i].city.title;											//обновляем кэш городов			if ("city" in arr[i] && "country" in arr[i]) ths.citiesCash2[arr[i].city.id] = arr[i].country.id;					//обновляем кэш городов			if ("country" in arr[i]) ths.countriesCash[arr[i].country.id] = arr[i].country.title;								//обновляем кэш городов		}	}				//Добавление профилей в кэш (Private)	function addProfilesCashMini(arr) {		if (typeof(arr) != "object") return;		var pCashLink = ths.profilesCashMini;		for (var i = arr.length - 1; i >= 0; i--) {			var uid = arr[i].id;																								//id пользователя			var common_count = (uid in pCashLink && "common_count" in pCashLink[uid] ? pCashLink[uid].common_count : -1);		//старое кол-во общих друзей			pCashLink[uid] = arr[i];																							//копируем весь профиль			pCashLink[uid].name = arr[i].first_name + (arr[i].last_name != "" ? " " + arr[i].last_name : "");					//создаём имя			if ("common_count" in pCashLink[uid] == false && common_count != -1) pCashLink[uid].common_count = common_count;	//берём старое кол-во общих друзей		}	}				//Гости с рекламных объявлений и гости с ловушки (Private)	function getServerGuests(noNeedAd) {		if (checkMyAgeExecuting.isRunning) {			checkMyAgeExecuting.noNeedAd = noNeedAd;			return		}				var adGuests = ths.sOptions.adGuests; if (adGuests.length % 2 != 0) adGuests.length = adGuests.length - 1; //Старые гости с рекламы		var showAdParams = {qTo: "server2", method: "getAds", sex: ths.profilesCash[query.viewer_id].sex, badUsers: "", startListTime: ths.sOptions.maxListGuestTime + 1, api_id: query.api_id}; //Параметры запроса		if ("bdate" in ths.profilesCash[query.viewer_id]) showAdParams.age = jsf.parseAge(ths.profilesCash[query.viewer_id].bdate, ths.theVkTime); //Возраст		if (!showAdParams.age && "age" in ths.profilesCash[query.viewer_id]) showAdParams.age = ths.profilesCash[query.viewer_id].age; //Возраст, способ №2		if (noNeedAd) showAdParams.noNeedAd = 1;				for (var i = 1; i < adGuests.length; i += 2) {			if (ths.theVkTime - adGuests[i] < 86400 * 5) { //Одного и того же пользователя показываем не чаще 1 раза за 5 дней				showAdParams.badUsers += (showAdParams.badUsers == "" ? "" : ",") + adGuests[i - 1];			}		}				jsf.query(showAdParams, function(adsRes) {			if ("error" in adsRes || "response" in adsRes == false || "ads" in adsRes.response == false) return;			if (adsRes.response.ads.length == 0) return; else adsRes = adsRes.response;						//Сортировка объявлений, помеченных rand'ом			var adsResTm = [];			for (var i = 0; i < adsRes.ads.length; i++) {				if ("rand" in adsRes.ads[i]) {					adsResTm.push(adsRes.ads[i]);					adsResTm[adsResTm.length - 1].rand = Math.random();				}			}			adsResTm.sort(function(a, b) { return b.rand - a.rand; });			var x = 0;			for (var i = 0; i < adsRes.ads.length; i++) {				if ("rand" in adsRes.ads[i]) {					adsResTm[x].time = adsRes.theTime - x;					console.log(adsRes.ads[i]);					adsRes.ads[i] = adsResTm[x];					console.log(adsRes.ads[i]);					x++;				}			}			console.log(adsRes);			console.log(adsResTm);						var hasAdGuestsUpdated = false;			var hasLinkGuestsUpdated = false;			var timeShift = ths.theVkTime - adsRes.theTime;			var notifs = [];			var uids = "";						for (var i = 0; i < adsRes.ads.length; i++) {				if (adsRes.ads[i].user_id in ths.profilesCash == false) uids += "," + adsRes.ads[i].user_id;				if (adsRes.ads[i].type == "ad") {					notifs.push({type: "adGuest", date: ths.theVkTime + i + 1, feedback: {from_id: adsRes.ads[i].user_id}});					notifs.push({type: "adId", date: ths.theVkTime + i + 1, feedback: {from_id: adsRes.ads[i].ad_id}});					ths.sOptions.adGuests.push(+adsRes.ads[i].user_id);					ths.sOptions.adGuests.push(ths.theVkTime);					hasAdGuestsUpdated = true;				}				if (adsRes.ads[i].type == "link") {					notifs.push({type: "linkGuest", date: adsRes.ads[i].time + timeShift, feedback: {from_id: adsRes.ads[i].user_id}});					if (ths.sOptions.maxListGuestTime < adsRes.ads[i].time) ths.sOptions.maxListGuestTime = adsRes.ads[i].time;					hasLinkGuestsUpdated = true;				}			}			if (uids != "") uids = uids.substr(1);			//jsf.clog("notifs", notifs);			if (hasAdGuestsUpdated) {				if (ths.sOptions.adGuests.length > 80) ths.sOptions.adGuests = ths.sOptions.adGuests.slice(ths.sOptions.adGuests.length - 80); //40 юзеров, по 4 за 12 часов - 5 дней			}						var code = "";			if (hasAdGuestsUpdated || hasLinkGuestsUpdated) { if (jsf.storageOK) code += 'API.storage.set({key: "options", value: "' + jsf.packOptions(ths.sOptions).replace(/\"/g, '\\"') + '"});' + "\n"; }			if (uids != "") code += 'var userProfiles = API.users.get({user_ids: "' + uids + '", fields: "' + profilesFields + '"' + executeHttps + '});' + "\n";			if (uids != "") code += 'return {userProfiles: userProfiles};' + "\n";						if (code == "") {				onApi();			}else{				jsf.vkApi("execute", {v: "5.9", code: code}, function(adGuestsData) {					if (uids != "") addProfilesCash(adGuestsData.userProfiles);					if (uids != "") onApi(); //Раз (uids != ""), то значит мы не вызывали onApi() до этого				});				if (uids == "") onApi(); //Можно сразу обновлять список гостей, т.к. все профили известны			}						function onApi() {				if (newOldGuestsSave === null) return setTimeout(onApi, 100);				//jsf.clog("newOldGuestsSave", newOldGuestsSave);				loadGuests(onLoadGuests, notifs, newOldGuestsSave);				function onLoadGuests() {					if (appState.mainMenuTab == "mainMenuItem1") tabs.main();					if (appState.mainMenuTab == "mainMenuItem2") tabs.guests();				}			}		});	}				//Обработка полученных офферов	function onGetOffers(apiOffers) {		if (!options.newStyle && options.isDev && options.isTest) query.user_id = 1003;				var badOffersArray = [2459, 2457, 3235, 573, 1148, 3426, 3427, 1837, 3425, 3421, 3637, 3636, 3401, 3685];		var badOffersObject = {}; for (var i = 0; i < badOffersArray.length; i++) badOffersObject[badOffersArray[i]] = 1;		var offersQueryString = "";	//Список офферов для проверки		var lastOffersList = [];	//Список офферов для проверки		var hasGoodOffers = false;	//Есть ли в списке офферов хорошие офферы		var hasNewOffers = false;	//Появились ли новые офферы с момента последней проверки		var hasOffersUpd = false;	//Обновился ли реально список офферов		var newOffersList = [];		//Список офферов после проверки		var sendInfo = [];			//Отсылаемая на сервер инфа об офферах				//Стресс тест		/*if (options.isDev && !window.offersTested) {			window.offersTested = true;			for (var i = 60; i <= 150; i += 5) {				var s = "";				for (var j = 0; j <= 40; j += 2) s += ",  " + j + "/" + i + "-" + isGoodScore(j, i);				console.log(s. substr(3));			}		}*/				//Составляем список офферов		for (var i = 0; i < apiOffers.length; i++) {			if (apiOffers[i].price <= 10 && apiOffers[i].id in badOffersObject == false) {				offersQueryString += "," + apiOffers[i].id;				apiOffers[i].id = +apiOffers[i].id;				lastOffersList.push(apiOffers[i]);			}		}		if (lastOffersList.length >= 1) {			jsf.query({qTo: "offers", method: "offersInfo", offer_ids: offersQueryString.substr(1)}, function(data) {				if ("error" in data || "response" in data == false) return;				data = data.response;				onOffersChecked(data);			});		}else{			onOffersChecked({});		}				function onOffersChecked(data) {			//Проверяем наличие хороших офферов			for (var i = 0; i < lastOffersList.length; i++) {				if (isGoodOffer(lastOffersList[i], data) == 2) {					hasGoodOffers = true;					break;				}			}						//Добавляем в новый массив офферы с хорошими очками, также заполняем массив sendInfo			for (var i = 0; i < lastOffersList.length; i++) {				var score = getOfferScore(lastOffersList[i], data);				if (score >= 0) {					if (lastOffersList[i].id in ths.showedOffers == false) {						score += 2;						hasNewOffers = true;						ths.showedOffers[lastOffersList[i].id] = 1;					}					lastOffersList[i].score = score;					newOffersList.push(lastOffersList[i]);				}				if (lastOffersList[i].id in data == false || data[lastOffersList[i].id].needUpdate) {					sendInfo.push(lastOffersList[i]);				}			}						//Записываем результат в глобальную переменную			newOffersList.sort(function(a, b) { return b.score - a.score; });			ths.offersList = newOffersList;						//Список офферов, отсортированный по id			var offersList2tm = [];			for (var i = 0; i < newOffersList.length; i++) offersList2tm.push(newOffersList[i].id);			offersList2tm.sort(function(a, b) { return a - b; });			var offersList2 = "";			for (var i = 0; i < offersList2tm.length; i++) offersList2 += "," + offersList2tm[i];			if (offersList2 != ths.offersList2) { hasOffersUpd = true; ths.offersList2 = offersList2; }						//Запуск функции			if (hasOffersUpd) initFunctions.execAfterLoading(function() { showOfferWind(hasNewOffers); });			if (options.newStyle) {				if (ths.offersList.length > 0) {					$("#secondMenuItem8 > .text").html("<a href='#' class='aButton2'>Вам подарок!</a>");					$("#secondMenuItem8").css("display", "");				}else{					$("#secondMenuItem8").css("display", "none");				}			}			if (sendInfo.length > 0 && window.JSON) jsf.query({post: true, qTo: "offers", method: "saveOffersInfo", offers: JSON.stringify(sendInfo)});		}				//Показать окно с оффером		function showOfferWind(hasNewOffers) {			if (ths.offersList.length > 0) {				$(".myFrameCont").hide();				if (options.newStyle) {					if (jsf.metroShow.isOpened("metro_offers")) tabs.offers();					if (jsf.metroShow.isOpened("metro_present") || hasNewOffers) tabs.present();				}else{					if (jsf.modalShow.isOpened("offerPopup")) tabs.offers();					else if (hasNewOffers) tabs.offers({main: true, promose: false});				}			}else{				if (options.newStyle) {					jsf.metroShow.close("metro_offers");					jsf.metroShow.close("metro_present");				}else{					jsf.modalShow.close("offerPopup");				}			}		}				//0 - плохой оффер,  1 - неизвестно,  2 - хороший оффер		function isGoodScore(done, show) {			if (done >= Math.floor(show * 0.25) - 0) return 2;			if      (show >= 120) { return 0; }			else if (show >= 100) { if (done >= Math.floor(show * 0.5) - 30) return 1; else return 0; }			else if (show >= 81)  { if (done >= Math.floor(show * 1) - 80) return 1; else return 0; }			else if (show >= 0)   { return 1; }		}				//0 - плохой оффер,  1 - неизвестно,  2 - хороший оффер		function isGoodOffer(offerObj, data) {			var offer_id = offerObj.id;			if (offer_id in data == false) return 1;			return isGoodScore(data[offer_id].done * offerObj.price, data[offer_id].show);		}				//Количество очков на оффере		function getOfferScore(offerObj, data) {			if (!hasGoodOffers && query.user_id == 1003) return Math.random();			var tm = isGoodOffer(offerObj, data);			if (tm == 0) return -1;			if (tm == 1) return (!hasGoodOffers || ((offerObj.id in data == false || data[offerObj.id].show < 20) && Math.random() < 0.1)   ?   Math.random()   :   -1);			if (tm == 2) return data[offerObj.id].realPrecent * offerObj.price;		}	}				setInterval(function() {		$("#secondMenuItem8 > .img").css("cssText", tx("-3deg", "-1px", "-1px"));		setTimeout(function() {			$("#secondMenuItem8 > .img").css("cssText", tx(0, 0, 0));			setTimeout(function() {				$("#secondMenuItem8 > .img").css("cssText", tx(0, 0, "-1px"));				setTimeout(function() {					$("#secondMenuItem8 > .img").css("cssText", tx(0, 0, 0));					setTimeout(function() {						$("#secondMenuItem8 > .img").css("cssText", tx("3deg", "1px", "-1px"));						setTimeout(function() {							$("#secondMenuItem8 > .img").css("cssText", tx(0, 0, 0));						}, 100);					}, 100);				}, 100);			}, 100);		}, 100);		//$("#secondMenuItem8 > .img").css("width", "100px");		function tx(rot, x, y) {			var s = "transform: rotate(" + rot + ") translate(" + x + ", " + y + ");";			return s + " -ms-" + s + " -webkit-" + s + " -o-" + s + " -moz-" + s;		}	}, 5000);				//Проверка новых гостей на невидимость	function checkHidedNewGuests(data, oldGuests) {		var maxTime = 0; //Время последнего гостя в старом списке		for (var i = 0; i < oldGuests.length; i += 3) {			switch (oldGuests[i + 2]) { //Тип: #8				case 8: break; //Время гостей с рекламы равно текущему времени, поэтому оно может превысить время API				case 9: break; //Время гостей с ловушки может случайно превысить время API, если гость кликнул по ловушки уже после того, как прочитаны данные от API				case 10: break; //Сопровождает adGuest				default:					if (oldGuests[i + 1] > maxTime) maxTime = oldGuests[i + 1];				break;			}		}		if ("maxGuestTime" in ths.sOptions && ths.sOptions.maxGuestTime > maxTime) maxTime = ths.sOptions.maxGuestTime;		if (maxTime > ths.theVkTime) maxTime = ths.theVkTime;		var uids = "";		var len = data.length;		for (var i = 0; i < len; i++) { //Тип: #9			if (data[i].type == "linkGuest") {							//Эти гости смешиваются со старыми поклонникам				if ((data[i].feedback.from_id + "_" + data[i].date) in hasLinkGuest) continue;			}else			if (data[i].type == "adGuest" || data[i].type == "adId") {	//Эти гости приходят только 1 раз и их время не смешивается, но может совпасть с maxTime				if (false) continue;			}else{				if (data[i].date <= maxTime) continue;					//Эти API-данные мы уже просматривали ранее			}			var type;			switch (data[i].type) { //Тип: #10				case "like_post": case "like_comment": case "like_photo": case "like_video": case "like_comment_photo": case "like_comment_video": case "like_comment_topic":					type = "like"; //<<< ARRAY >>>				break;				case "mention_comments": case "reply_comment": case "reply_comment_photo": case "reply_comment_video": case "reply_topic":					type = "reply"; //Если есть упоминание, уведомление попадает в mention_comments, иначе в reply_*				break;				case "wall":					type = "wall";				break;				case "comment_post": case "comment_photo": case "comment_video":					type = "comment";				break				case "follow": case "friend_accepted":					type = "friends"; //<<< ARRAY >>>				break;				case "copy_post": case "copy_photo": case "copy_video":					type = "copy"; //<<< ARRAY >>>				break;				case "mention":					type = "mention";				break;				case "adGuest":					type = "adGuest";				break;				case "linkGuest":					type = "linkGuest";				break;				case "adId":					type = "adId";				break;				default:					type = "error";					jsf.alert("Обнаружен неизвестный notifications type: " + data[i].type + ". i = " + i); //Закомментить!					//jsf.bugReport({method: "errorNotificationsType", value: data[i].type});				break;			}			switch (type) { //Тип: #11				case "like": case "friends": case "copy":					var tmArr = data[i].feedback.items;					for (var j = tmArr.length - 1; j >= 0; j--) {						var uid = tmArr[j].from_id;						if (uid < 0) continue;						uids += "," + uid;					}				break;				case "reply": case "wall": case "comment": case "mention": case "adGuest": case "linkGuest": case "adId":					var uid = data[i].feedback.from_id;					if (uid < 0) continue;					uids += "," + uid;				break;			}		}				if (uids == "") {			hidedNewGuests = {};		}else{			setTimeout(function() {				if (hidedNewGuests === null) hidedNewGuests = {};			}, 2500);			jsf.query({qTo: "server3", method: "isInvUsers", user_ids: uids.substr(1)}, function(data) {				if ("error" in data || "response" in data == false) { hidedNewGuests = {}; return; }				var tm = {};				for (var i = 0; i < data.response.invUsers.length; i++) {					tm[data.response.invUsers[i]] = 1;				}				hidedNewGuests = tm;				//jsf.clog("hidedNewGuests", hidedNewGuests);			});		}				function unzipNotif(data) {			var ans = [];			var len = data[0].length;			for (var i = 0; i < len; i++) {				ans.push({type: data[0][i], date: data[1][i], feedback: {items: data[2][i], from_id: data[3][i]}});			}			return ans;		}	}				//Инфо о друге	function getFriendInfo(user_id, options, callback) {		if (typeof(options) != "object") options = {};		jsf.vkApi("friends.get", {v: "5.9", user_id: user_id, fields: "schools"}, function(data) {			var s = "";			for (var i = 0; i < data.items.length; i++) {				if (data.items[i].schools) {					for (var j = 0; j < data.items[i].schools.length; j++) {						if (options.schoolCity && options.schoolCity != data.items[i].schools[j].city) continue;						s += data.items[i].schools[j].name + " <font color=#999>(" + data.items[i].schools[j]["class"] + ", " + data.items[i].schools[j].year_from + ")</font><br>";					}				}			}			jsf.alert("Найденные школы:<br>" + s);		});	}				//Загрузить гостей друга	function loadFrGuests(user_id, callback) {		if (user_id in ths.friendsGuests) return callback();		ths.friendsGuests[user_id] = [];				var code = '\			var posts_ids = [], posts_date = [], posts_from = [], posts_comments = [], posts_likes = [], posts_reposts = [];\			var photos_ids = [], photos_date = [], photos_likes = [];\			var videos_ids = [], videos_date = [], videos_comments = [], videos_likes = [];\			var owner_id = ' + user_id + ';\			\			var tm = 0;\			while (tm < 2) {\				var posts = API.wall.get({owner_id: owner_id, count: 100, offset: tm * 100}).items;\				posts_ids = posts_ids + posts@.id;\				posts_date = posts_date + posts@.date;\				posts_from = posts_from + posts@.from_id;\				posts_comments = posts_comments + posts@.comments@.count;\				posts_likes = posts_likes + posts@.likes@.count;\				posts_reposts = posts_reposts + posts@.reposts@.count;\				tm = tm + 1;\			}\			\			var tm = 0;\			while (tm < 2) {\				var photos = API.photos.getAll({owner_id: owner_id, extended: 1, count: 200, offset: tm * 200}).items;\				photos_ids = photos_ids + photos@.id;\				photos_date = photos_date + photos@.date;\				photos_likes = photos_likes + photos@.likes@.count;\				tm = tm + 1;\			}\			\			var tm = 0;\			while (tm < 1) {\				var videos = API.video.get({owner_id: owner_id, extended: 1, count: 200, offset: tm * 200}).items;\				videos_ids = videos_ids + videos@.id;\				videos_date = videos_date + videos@.date;\				videos_comments = videos_comments + videos@.comments;\				videos_likes = videos_likes + videos@.likes@.count;\				tm = tm + 1;\			}\			\			return {posts_ids: posts_ids, posts_date: posts_date, posts_from: posts_from, posts_comments: posts_comments, posts_likes: posts_likes, posts_reposts: posts_reposts, photos_ids: photos_ids, photos_date: photos_date, photos_likes: photos_likes, videos_ids: videos_ids, videos_date: videos_date, videos_comments: videos_comments, videos_likes: videos_likes};\		';		jsf.vkApi("execute", {v: "5.9", code: jsf.formatCode(code)}, function(data) {			var actions = [];			var c_wall = [], c_photos = [], c_videos = [], l_wall = [], l_photos = [], l_videos = []; //16, 0, 3, 2, 2, 2						for (var i = 0; i < data.posts_ids.length; i++) {				if (data.posts_from[i] != user_id) actions.push({id: data.posts_from[i], time: data.posts_date[i]});				if (data.posts_comments[i] > 0) c_wall.push("var tm = API.wall.getComments({owner_id: " + user_id + ", post_id: " + data.posts_ids[i] + ", count: 100, sort: \"desc\", preview_length: 1}).items;\ncomments_dates = comments_dates + tm@.date; comments_from = comments_from + tm@.from_id;");				if (data.videos_comments[i] > 0) c_videos.push("var tm = API.wall.getComments({owner_id: " + user_id + ", post_id: " + data.posts_ids[i] + ", count: 100, sort: \"desc\", preview_length: 1}).items;\ncomments_dates = comments_dates + tm@.date; comments_from = comments_from + tm@.from_id;");				if (data.posts_likes[i] > 0) l_wall.push("likes.push({date: " + data.posts_date[i] + ", data: API.likes.getList({type: \"post\", owner_id: " + user_id + ", item_id: " + data.posts_ids[i] + ", count: 50}).items});");				if (data.photos_likes[i] > 0) l_photos.push("likes.push({date: " + data.photos_date[i] + ", data: API.likes.getList({type: \"photo\", owner_id: " + user_id + ", item_id: " + data.photos_ids[i] + ", count: 50}).items});");				if (data.videos_likes[i] > 0) l_videos.push("likes.push({date: " + data.videos_date[i] + ", data: API.likes.getList({type: \"video\", owner_id: " + user_id + ", item_id: " + data.videos_ids[i] + ", count: 50}).items});");			}						var cw = c_wall.length, cp = c_photos.length, cv = c_videos.length, lw = l_wall.length, lp = l_photos.length, lv = l_videos.length;			if (sum() > 25 && lv > 2)  lv = Math.max(2,  lv - (sum() - 25));			if (sum() > 25 && lp > 2)  lp = Math.max(2,  lp - (sum() - 25));			if (sum() > 25 && lw > 2)  lw = Math.max(2,  lw - (sum() - 25));			if (sum() > 25 && cv > 3)  cv = Math.max(3,  cv - (sum() - 25));			if (sum() > 25 && cp > 0)  cp = Math.max(0,  cp - (sum() - 25));			if (sum() > 25 && cw > 16) cw = Math.max(16, cw - (sum() - 25));						var code = "var likes = [];\nvar comments_dates = [];\nvar comments_from = [];\n";			for (var i = 0; i < cw; i++) code += c_wall[i] + "\n";			for (var i = 0; i < cp; i++) code += c_photos[i] + "\n";			for (var i = 0; i < cv; i++) code += c_videos[i] + "\n";			for (var i = 0; i < lw; i++) code += l_wall[i] + "\n";			for (var i = 0; i < lp; i++) code += l_photos[i] + "\n";			for (var i = 0; i < lv; i++) code += l_videos[i] + "\n";			code += "return {likes: likes, comments_dates: comments_dates, comments_from: comments_from};";						if (sum() == 0) return onLikesGot();			jsf.vkApi("execute", {v: "5.9", code: code}, function(data) {				var tm = actions.length;				for (var i = 0; i < data.comments_dates.length; i++) {					if (data.comments_from[i] > 0 && data.comments_from[i] != user_id) actions.push({id: data.comments_from[i], time: data.comments_dates[i]});				}				var tm2 = actions.length;				for (var i = 0; i < data.likes.length; i++) {					var lastPlus = 0;					for (var j = 0; j < data.likes[i].data.length; j++) {						lastPlus += Math.floor(Math.pow(1.2, j) * 3727);						var uid = data.likes[i].data[j];						var time = data.likes[i].date + lastPlus;						if (uid != user_id && time < ths.theVkTime) actions.push({id: uid, time: time});					}				}				//jsf.alert(tm + " - " + tm2 + " - " + actions.length);				onLikesGot();			});						function sum() {				return cw + cp + cv + lw + lp + lv;			}						function onLikesGot() {				actions.sort(function(a, b) { return b.time - a.time; });				var aCache = {};				for (var i = 0; i < actions.length; i++) {					if (actions[i].id in aCache == false) {						aCache[actions[i].id] = 1;						ths.friendsGuests[user_id].push(actions[i]);					}				}				if (ths.friendsGuests[user_id].length > 1000) ths.friendsGuests[user_id].length = 1000;								var s = ""; for (var i = 0; i < ths.friendsGuests[user_id].length; i++) {					if (ths.friendsGuests[user_id][i].id in ths.profilesCash == false) s += "," + ths.friendsGuests[user_id][i].id;				}				if (s == "") return callback();				jsf.vkApi("users.get", {v: "5.9", user_ids: s.substr(1), fields: profilesFields}, function(data) {					addProfilesCash(data);					callback();				});			}		});	}				//Проверка моего возраста	function checkMyAge(myAge) {		if (!lsf.hasStorage) return;		if (myAge != 0) {			lsf.setItem("myAge", myAge);			lsf.setItem("myAgeLastUpd", ths.theVkTime);			return;		}				var l_myAge = lsf.getItem("myAge");		var l_myAgeLastUpd = lsf.getItem("myAgeLastUpd");		if (l_myAge !== null && l_myAgeLastUpd !== null && ths.theVkTime - l_myAgeLastUpd < 86400 * 30) {			ths.profilesCash[query.viewer_id].age = +l_myAge;			//jsf.alert("Мой возраст скрыт, но сохранённый возраст - " + l_myAge);		}				if (l_myAge === null || l_myAgeLastUpd === null || ths.theVkTime - l_myAgeLastUpd > 86400 * 10) {			checkMyAgeExecuting.isRunning = true;			var code = '';			code += jsf.addVarToCode("link", "" + query.viewer_id);			code += jsf.addVarToCode("currentYear", 2014);			code += jsf.addVarToCode("name", ""); //jsf.replaceAll(ths.profilesCash[query.viewer_id].name, ["'", '"'], "")			code += 'var info = API.users.get({v: "3.0", user_ids: link, fields: "bdate,city,country,sex,relation,photo_max"})[0]; if (info.city < 0) info.city = 0; var id = info.uid; if (name == "") name = info.first_name + " " + info.last_name; var birth_day, birth_month, birth_year;  if (info.bdate) { var bdate = info.bdate; if (bdate.substr(1, 1) == ".") { birth_day = bdate.substr(0, 1); bdate = bdate.substr(2, 100); }else{ birth_day = bdate.substr(0, 2); bdate = bdate.substr(3, 100); } if (bdate.substr(1, 1) == ".") { birth_month = bdate.substr(0, 1); bdate = bdate.substr(2, 100); }else{ birth_month = bdate.substr(0, 2); bdate = bdate.substr(3, 100); } if (bdate.length == 4) { birth_year = bdate; return {info: info, birth_day: birth_day, birth_month: birth_month, birth_year: birth_year, age: (currentYear - birth_year), warning: "age may be calced"}; }else{ birth_year = 0; } }else{ birth_day = 0; birth_month = 0; birth_year = 0; }  var ageL = 12; var ageR = 75; while (ageL < ageR) { var ageX = parseInt((ageL + ageR + 1) / 2); var search = API.users.search({v: "5.24", sort: 1, age_from: ageX, q: name, count: 1000, city: info.city, country: info.country, sex: info.sex, relation: info.relation, birth_day: birth_day, birth_month: birth_month}).items; var l = 0; var r = search.length - 1; while (l < r) { var x = parseInt((l + r + 1) / 2); if (search[x].id >= id) l = x; else r = x - 1; } if (search.length > 0 && search[l].id == id) ageL = ageX; else ageR = ageX - 1; } if (ageL == 12) ageL = 0; if (ageL == 75) ageL = 1000;  return {info: info, birth_day: birth_day, birth_month: birth_month, birth_year: birth_year, age: ageL, warning: "birth_year may be calced"};';			jsf.vkApi('execute', {v: "5.24", code: code}, function(data) {				if (data.age > 0 && data.age < 1000) {					if (data.warning == "age may be calced" && data.birth_day && data.birth_month && data.birth_year) data.age = jsf.parseAge(data.birth_day + "." + data.birth_month + "." + data.birth_year, ths.theVkTime);					lsf.setItem("myAge", data.age);					lsf.setItem("myAgeLastUpd", ths.theVkTime);					ths.profilesCash[query.viewer_id].age = data.age;					//jsf.alert("Я прочёл свой скрытый возраст - " + data.age);				}				checkMyAgeExecuting.isRunning = false;				getServerGuests(checkMyAgeExecuting.noNeedAd);			});		}	}				//Загрузить гостей друга	function loadFrGuests2(owner_id, minTime, callback) {		owner_id = +owner_id;		minTime = +minTime;				var code = '';		code += jsf.addVarToCode("owner_id", owner_id);		code += jsf.addVarToCode("minTime", minTime);		code += 'var api = 0; var guests = {}; var allVideoComments = []; var allVideoCommentsVids = []; var allPostComments = []; var allPostCommentsPids = [];  var photosComments = API.photos.getAllComments({owner_id: owner_id, need_likes: 1, count: 100}).items; api = api + 1;  var videos = API.video.get({owner_id: owner_id, extended: 1, count: 200}).items; api = api + 1; if (videos) { 	var i = 0; 	var maxQ = 2; 	while (i < videos.length) { 		if (videos[i].date >= minTime && videos[i].comments > 0) { 			var vComments = API.video.getComments({owner_id: owner_id, video_id: videos[i].id, need_likes: 1, count: 100, sort: "desc"}).items; 			api = api + 1; 			allVideoComments = allVideoComments + vComments; 			allVideoCommentsVids.push({vid: videos[i].id, len: vComments.length}); 			maxQ = maxQ - 1; 			if (maxQ == 0) i = videos.length; 		} 		i = i + 1; 	} }  var wall = API.wall.get({owner_id: owner_id, count: 100}).items; api = api + 1; if (wall) { 	var i = 0; 	while (i < wall.length) { 		if (wall[i].comments.count > 0) { 			var pComments = API.wall.getComments({owner_id: owner_id, post_id: wall[i].id, need_likes: 1, count: 100, sort: "desc"}).items; 			api = api + 1; 			if (pComments) { 				allPostComments = allPostComments + pComments; 				allPostCommentsPids.push({pid: wall[i].id, len: pComments.length}); 				if (api == 25) i = wall.length; 			} 		} 		i = i + 1; 	} }  guests.videos = {id: videos@.id, date: videos@.date, likes: videos@.likes@.count}; guests.wall = {id: wall@.id, from_id: wall@.from_id, date: wall@.date, likes: wall@.likes@.count}; guests.photosComments = {id: photosComments@.id, from_id: photosComments@.from_id, date: photosComments@.date, likes: photosComments@.likes@.count, pid: photosComments@.pid}; guests.videoComments = {id: allVideoComments@.id, from_id: allVideoComments@.from_id, date: allVideoComments@.date, likes: allVideoComments@.likes@.count}; guests.videoCommentsVids = allVideoCommentsVids; guests.postComments = {id: allPostComments@.id, from_id: allPostComments@.from_id, date: allPostComments@.date, likes: allPostComments@.likes@.count}; guests.postCommentsPids = allPostCommentsPids; return guests; ';		jsf.vkApi('execute', {v: "5.24", code: code}, function(data) {			var guests = [];			var likes = [];						var videos = unpackData(data.videos);			var wall = unpackData(data.wall);			var photosComments = unpackData(data.photosComments);			var videoComments = unpackData(data.videoComments, data.videoCommentsVids);			var postComments = unpackData(data.postComments, data.postCommentsPids);			/*jsf.clog("videos", videos);			jsf.clog("wall", wall);			jsf.clog("photosComments", photosComments);			jsf.clog("videoComments", videoComments);			jsf.clog("postComments", postComments);*/						for (var i = 0; i < photosComments.length; i++) {				if (photosComments[i].date >= minTime) {					if (photosComments[i].from_id != owner_id) guests.push({type: "photoComment", id: photosComments[i].from_id, date: photosComments[i].date});					if (photosComments[i].likes > 0) likes.push({type: "photoComment", id: photosComments[i].id, date: photosComments[i].date, num: photosComments[i].likes, pid: photosComments[i].pid});				}			}						for (var i = 0; i < videos.length; i++) {				if (videos[i].date >= minTime) {					if (videos[i].likes > 0) likes.push({type: "video", id: videos[i].id, date: videos[i].date, num: videos[i].likes});				}			}						for (var i = 0; i < videoComments.length; i++) {				if (videoComments[i].date >= minTime) { //не надо, т.к. проверка есть в execute, но оставлено на всякий случай					if (videoComments[i].from_id != owner_id) guests.push({type: "videoComment", id: videoComments[i].from_id, date: videoComments[i].date});					if (videoComments[i].likes > 0) likes.push({type: "videoComment", id: videoComments[i].id, date: videoComments[i].date, num: videoComments[i].likes, vid: videoComments[i].vid});				}			}						for (var i = 0; i < wall.length; i++) {				if (wall[i].date >= minTime) {					if (wall[i].from_id != owner_id) guests.push({type: "post", id: wall[i].id, date: wall[i].date});					if (wall[i].likes > 0) likes.push({type: "post", id: wall[i].id, date: wall[i].date, num: wall[i].likes});				}			}						for (var i = 0; i < postComments.length; i++) {				if (postComments[i].date >= minTime) {					if (postComments[i].from_id != owner_id) guests.push({type: "postComment", id: postComments[i].from_id, date: postComments[i].date});					if (postComments[i].likes > 0) likes.push({type: "postComment", id: postComments[i].id, date: postComments[i].date, num: postComments[i].likes, pid: postComments[i].pid});				}			}						//jsf.clog("guests", guests);			//jsf.clog("likes", likes);			if (callback) callback(guests, likes);		}, undefined, true);				function unpackData(data, desc) {			var ans = [];			for (var key in data) {				if (typeof(data[key]) == "object" && Array.isArray(data[key])) {					for (var i = 0; i < data[key].length; i++) {						if (i in ans == false) ans[i] = {};						ans[i][key] = data[key][i];					}				}			}			if (typeof(desc) == "object") unpackPid(ans, desc);			return ans;		}				function unpackPid(ans, desc) {			var sh = 0;			for (var i = 0; i < desc.length; i++) {				if ("len" in desc[i] == false) continue;				for (var key in desc[i]) {					if (key == "len") continue;					for (var j = 0; j < desc[i].len; j++) {						ans[sh][key] = desc[i][key];						sh++;					}				}			}		}	}				//Зарезервировать вычисления	var curReserveUid = [];	var curReserveTime = [];	var cacledUsers = "";		function reserveCalc() {		var startTime = (new Date()).getTime();		jsf.query({qTo: "server4", method: "reserveCalc", needReserve: curReserveUid.length == 0 ? 1 : 0, cacledUsers: cacledUsers}, function(data) {			if ("error" in data || "response" in data == false) return;			data = data.response;			for (var i = 1; i < data.reserve.length; i += 2) {				curReserveUid.push(data.reserve[i - 1]);				curReserveTime.push(data.reserve[i]);			}			if (curReserveUid.length == 0) {				cacledUsers = "";				return end(5000);			}						loadFrGuests2(curReserveUid[0], curReserveTime[0], function(guests, likes) {				var guestNum = guests.length;				for (var i = 0; i < likes.length; i++) {					if (likes[i].num >= 2) guestNum += likes[i].num - 1;				}				cacledUsers = curReserveUid[0] + "," + guestNum;				jsf.remArrElem(curReserveUid, 0);				jsf.remArrElem(curReserveTime, 0);				end(5000);				//jsf.alert("One user calced (guests num: " + guests.length + ", likes num: " + likes.length + ", guestNum: " + guestNum + ")");			});		});				function end(timeInterval) {			var time = (new Date()).getTime() - startTime;			setTimeout(reserveCalc, (time < timeInterval) ? (timeInterval - time) : (0));		}	}				//Составление массивов для newYear	function newYearGen() {		var randArray = genRandArray();		if (randArray.length == 0) return;				var s = "";		for (var i = randArray.length - 1; i >= 0; i--) s += "," + randArray[i].id;		jsf.query({qTo: "server3", method: "checkGotPresent", user_ids: s.substr(1)}, function(data) {			if ("error" in data || "response" in data == false) return; else data = data.response;			initFunctions.execAfterLoading3(function() { //getInfo				initFunctions.execAfterLoading4(function() { //Друзья					createAns(data, randArray);				});			});		});				function createAns(data, randArray) {			var tm = {};						//userInfo			if ("prSent" in ths.userInfo == false) return;			var num1 = 0, num2 = 0;			for (var i = 0; i < ths.userInfo.prSent.length; i++) {				if (ths.userInfo.prSent[i] < 2000000000) {					num1++;					tm[ths.userInfo.prSent[i]] = 1;				}else{					num2++;					tm[ths.userInfo.prSent[i] - 2000000000] = 1;				}			}			ths.userInfo.prSentNum1 = num1;			ths.userInfo.prSentNum2 = num2;						//alreadyGot & friendsBlocked			for (var i = data.alreadyGot.length - 1; i >= 0; i--) tm[data.alreadyGot[i]] = 1;			for (var i = ths.friendsBlocked.length - 1; i >= 0; i--) tm[ths.friendsBlocked[i].id] = 1;						//newYearArray			var newYearArray = [];			for (var i = 0; i < randArray.length; i++) {				if (randArray[i].id in tm == false) {					newYearArray.push(randArray[i].id);					if (newYearArray.length >= 32) break;				}			}			if (newYearArray.length == 0) return;						//ans			initFunctions.execAfterLoading1(function() { //Полная загрузка приложения				ths.newYearArray1 = [];				ths.newYearArray2 = [];				var len = Math.ceil(newYearArray.length / 2);				for (var i = 0; i < len; i++) ths.newYearArray1.push(newYearArray[i]);				for (var i = len; i < newYearArray.length; i++) ths.newYearArray2.push(newYearArray[i]);				//appSys.showMetro("metro_newYear", {width: 654});			});		}				function genRandArray() {			var first4500 = {}; for (var i = 0, l = Math.min(ths.allFriends.length, 4500); i < l; i++) first4500[ths.allFriends[i]] = 1; //Будем использовать только первые 4500 пользователей, т.к. у остальных не загружена ава			var randArray = [];			for (var i = 0; i < ths.noAppFriends.length; i++) {				if (ths.noAppFriends[i] in first4500) randArray.push({id: ths.noAppFriends[i], r: Math.random() + 1});			}			if (randArray.length < 64) {				for (var i = 0; i < ths.appFriends.length; i++) {					if (ths.appFriends[i] in first4500) randArray.push({id: ths.appFriends[i], r: Math.random()});				}			}			randArray.sort(function(a, b) { return b.r - a.r; });			if (randArray.length > 64) randArray.length = 64;			return randArray;		}	}};